declare const _sfc_main: import("vue").DefineComponent<{}, {
    props: {
        mode: 'vertical' | 'horizontal';
        isMobile: boolean;
        maskBg: string;
        useMinWidthLayout: boolean;
        minWidth: number;
        headerVisible: boolean;
        headerHeight: number;
        tabVisible: boolean;
        tabHeight: number;
        fixedHeaderAndTab: boolean;
        addMainOverflowHidden: boolean;
        footerVisible: boolean;
        footerHeight: number;
        fixedFooter: boolean;
        siderVisible: boolean;
        siderWidth: number;
        siderCollapsedWidth: number;
        siderCollapse: boolean;
        transitionDuration: number;
        transitionTimingFunction: string;
    };
    emit: (e: 'update:sider-collapse', collapse: boolean) => void;
    style: import("vue").ComputedRef<string>;
    hasFixedEl: import("vue").ComputedRef<boolean>;
    transformStyle: import("vue").ComputedRef<string>;
    headerAndTabTransform: import("vue").ComputedRef<string>;
    footerTransform: import("vue").ComputedRef<string>;
    commonProps: import("vue").ComputedRef<{
        transitionDuration: number;
        transitionTimingFunction: string;
    }>;
    isVertical: import("vue").ComputedRef<boolean>;
    headerZIndex: number;
    tabZIndex: number;
    siderZIndex: import("vue").ComputedRef<1003 | 1000>;
    footerZIndex: number;
    siderCollapseStatus: import("vue").WritableComputedRef<unknown>;
    handleClickMask: () => void;
    showMask: import("vue").ComputedRef<boolean>;
    siderStyle: import("vue").ComputedRef<string>;
    currentSiderWidth: import("vue").ComputedRef<number>;
    commonPaddingLeft: import("vue").ComputedRef<number>;
    headerPaddingLeft: import("vue").ComputedRef<number>;
    siderPaddingTop: import("vue").ComputedRef<number>;
    contentPaddingTop: import("vue").ComputedRef<number>;
    contentPaddingBottom: import("vue").ComputedRef<number>;
    c: import("css-render").createCNode<import("css-render").CSelector>;
    cStyle: import("css-render").CNode;
    LayoutHeader: import("vue").DefineComponent<unknown, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
    LayoutTab: import("vue").DefineComponent<unknown, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
    LayoutSider: import("vue").DefineComponent<unknown, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
    LayoutContent: import("vue").DefineComponent<unknown, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
    LayoutFooter: import("vue").DefineComponent<unknown, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:sider-collapse"[], "update:sider-collapse", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    "onUpdate:sider-collapse"?: ((...args: any[]) => any) | undefined;
}, {}>;
export default _sfc_main;
